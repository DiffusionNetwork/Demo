# -*- coding: utf-8 -*-
from PyQt5.QtGui import QTextCursor
# Form implementation generated from reading ui file 'system_main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import *
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QTextCursor

import sys
import os
import numpy as np
import datetime
import pandas as pd
from sklearn.cluster import KMeans
import math



class Ui_MainWindow(object):

    def __init__(self):

        self.file_path = ""
        self.lidu_type = "node"
        self.aspect_type = "one"
        self.data_type = "complete"
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(657, 434)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox_lidu = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_lidu.setGeometry(QtCore.QRect(40, 70, 161, 101))
        self.groupBox_lidu.setTitle("")
        self.groupBox_lidu.setObjectName("groupBox_lidu")
        self.layoutWidget = QtWidgets.QWidget(self.groupBox_lidu)
        self.layoutWidget.setGeometry(QtCore.QRect(40, 0, 81, 101))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.radioButton_node_lidu = QtWidgets.QRadioButton(self.layoutWidget)
        self.radioButton_node_lidu.setObjectName("radioButton_node_lidu")
        self.verticalLayout.addWidget(self.radioButton_node_lidu)
        self.radioButton_group_lidu = QtWidgets.QRadioButton(self.layoutWidget)
        self.radioButton_group_lidu.setObjectName("radioButton_group_lidu")
        self.verticalLayout.addWidget(self.radioButton_group_lidu)
        self.pushButton_begin = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_begin.setGeometry(QtCore.QRect(270, 310, 111, 31))
        self.pushButton_begin.setObjectName("pushButton_begin")
        self.groupBox_aspect = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_aspect.setGeometry(QtCore.QRect(240, 70, 161, 101))
        self.groupBox_aspect.setTitle("")
        self.groupBox_aspect.setObjectName("groupBox_aspect")
        self.layoutWidget1 = QtWidgets.QWidget(self.groupBox_aspect)
        self.layoutWidget1.setGeometry(QtCore.QRect(30, 0, 106, 101))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.layoutWidget1)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.radioButton_one_aspect = QtWidgets.QRadioButton(self.layoutWidget1)
        self.radioButton_one_aspect.setObjectName("radioButton_one_aspect")
        self.verticalLayout_2.addWidget(self.radioButton_one_aspect)
        self.radioButton_multi_aspect = QtWidgets.QRadioButton(self.layoutWidget1)
        self.radioButton_multi_aspect.setObjectName("radioButton_multi_aspect")
        self.verticalLayout_2.addWidget(self.radioButton_multi_aspect)
        self.groupBox_data = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_data.setGeometry(QtCore.QRect(450, 70, 171, 101))
        self.groupBox_data.setTitle("")
        self.groupBox_data.setObjectName("groupBox_data")
        self.layoutWidget2 = QtWidgets.QWidget(self.groupBox_data)
        self.layoutWidget2.setGeometry(QtCore.QRect(30, 0, 106, 101))
        self.layoutWidget2.setObjectName("layoutWidget2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.layoutWidget2)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.radioButton_complete_data = QtWidgets.QRadioButton(self.layoutWidget2)
        self.radioButton_complete_data.setObjectName("radioButton_complete_data")
        self.verticalLayout_3.addWidget(self.radioButton_complete_data)
        self.radioButton_noise_data = QtWidgets.QRadioButton(self.layoutWidget2)
        self.radioButton_noise_data.setObjectName("radioButton_noise_data")
        self.verticalLayout_3.addWidget(self.radioButton_noise_data)
        self.radioButton_incomplete_data = QtWidgets.QRadioButton(self.layoutWidget2)
        self.radioButton_incomplete_data.setObjectName("radioButton_incomplete_data")
        self.verticalLayout_3.addWidget(self.radioButton_incomplete_data)
        self.lineEdit_file_address = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_file_address.setGeometry(QtCore.QRect(70, 200, 431, 21))
        self.lineEdit_file_address.setObjectName("lineEdit_file_address")
        self.toolButton_select_file = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton_select_file.setGeometry(QtCore.QRect(510, 200, 91, 21))
        self.toolButton_select_file.setObjectName("toolButton_select_file")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(250, 0, 151, 41))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.label.setFont(font)
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 657, 24))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.radioButton_node_lidu.setChecked(True)  # 默认点击节点粒度选项
        self.radioButton_one_aspect.setChecked(True)  # 默认点击单模态选项
        self.radioButton_complete_data.setChecked(True)  # 默认点击完整数据选项


        # UI初始化完成，开始程序逻辑
        # 绑定signal与slot函数
        self.pushButton_begin.clicked.connect(self.pushButton_begin_event)
        self.radioButton_node_lidu.clicked.connect(self.node_lidu_clicked_event)
        self.radioButton_group_lidu.clicked.connect(self.group_lidu_clicked_event)
        self.radioButton_one_aspect.clicked.connect(self.one_aspect_clicked_event)
        self.radioButton_multi_aspect.clicked.connect(self.multi_aspect_clicked_event)
        self.radioButton_complete_data.clicked.connect(self.complete_data_clicked_event)
        self.radioButton_noise_data.clicked.connect(self.noise_data_clicked_event)
        self.radioButton_incomplete_data.clicked.connect(self.incomplete_data_clicked_event)
        self.toolButton_select_file.clicked.connect(self.get_file_path)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "传播网络重构"))
        self.radioButton_node_lidu.setText(_translate("MainWindow", "节点粒度"))
        self.radioButton_group_lidu.setText(_translate("MainWindow", "团体粒度"))
        self.pushButton_begin.setText(_translate("MainWindow", "开始"))
        self.radioButton_one_aspect.setText(_translate("MainWindow", "单质传播网络"))
        self.radioButton_multi_aspect.setText(_translate("MainWindow", "异质传播网络"))
        self.radioButton_complete_data.setText(_translate("MainWindow", "完整感染数据"))
        self.radioButton_noise_data.setText(_translate("MainWindow", "噪音感染数据"))
        self.radioButton_incomplete_data.setText(_translate("MainWindow", "缺失感染数据"))
        self.toolButton_select_file.setText(_translate("MainWindow", "上传历史感染数据"))
        self.label.setText(_translate("MainWindow", "传播网络重构"))

    def pushButton_begin_event(self, event):
        # 提交按钮被点击,首先检查提交数据类型是否符合选择类型，再开始推图

        # msgBox = QMessageBox()
        # msgBox.setIcon(QMessageBox.Information)
        # msgBox.setText("传播网络推断结果如下")
        # msgBox.setWindowTitle("传播网络推断结构")
        # msgBox.setStandardButtons(QMessageBox.Ok)

        # 首先从输入框获取文件路径
        self.file_path = self.lineEdit_file_address.text()
        # 检查文件路径的合法性
        if not os.path.exists(self.file_path):
            QMessageBox.warning(None, "警告", "输入文件不存在", QMessageBox.Ok)

        # 根据文件路径读取数据
        record_data = self.read_records_and_graph(self.file_path)
        # 判断推断类型并开始推断
        if self.lidu_type == "group":
            # 团体粒度推断
            result = self.IMI_prune(record_data)
            mode = 3
        elif self.aspect_type == "multi":
            # 多模态推断
            result = self.IMI_prune(record_data)
            mode = 4

        elif self.data_type == "complete":
            # 不是团体和多模态那就是节点完整数据推断
            result = self.IMI_prune(record_data)
            mode = 0
        elif self.data_type == "noise":
            # 节点噪声数据推断
            result = self.IMI_prune(record_data)
            mode = 2
        else:
            # 节点缺失数据推断
            result = self.IMI_prune(record_data)
            mode = 1

        result_dialog = Result_Dialog(result,mode)
        result_dialog.exec_()




    def read_records_and_graph(self,record_path):
        record_df = pd.read_csv(record_path, sep='\t', header=None)
        record_data = record_df.values  # 提取其中的array

        return record_data


    def IMI_prune(self,record_states):
        results_num, nodes_num = record_states.shape
        print("\nresults_num = ", results_num)
        IMI = np.zeros((nodes_num, nodes_num))

        for j in range(nodes_num):
            for k in range(nodes_num):
                if j >= k:
                    continue
                state_mat = np.zeros((2, 2))
                for result_index in range(results_num):
                    state_mat[int(record_states[result_index, j]), int(record_states[result_index, k])] += 1

                epsilon = 1e-5
                M00 = state_mat[0, 0] / results_num * math.log(
                    state_mat[0, 0] * results_num / (state_mat[0, 0] + state_mat[0, 1]) / (
                            state_mat[0, 0] + state_mat[1, 0]) + epsilon, 2)
                M01 = state_mat[0, 1] / results_num * math.log(
                    state_mat[0, 1] * results_num / (state_mat[0, 0] + state_mat[0, 1]) / (
                            state_mat[0, 1] + state_mat[1, 1]) + epsilon, 2)
                M10 = state_mat[1, 0] / results_num * math.log(
                    state_mat[1, 0] * results_num / (state_mat[1, 0] + state_mat[1, 1]) / (
                            state_mat[0, 0] + state_mat[1, 0]) + epsilon, 2)
                M11 = state_mat[1, 1] / results_num * math.log(
                    state_mat[1, 1] * results_num / (state_mat[1, 0] + state_mat[1, 1]) / (
                            state_mat[0, 1] + state_mat[1, 1]) + epsilon, 2)

                IMI[j, k] = M00 + M11 - abs(M10) - abs(M01)
                # IMI[j, k] = M00 + M11 +M10 + M01
                IMI[k, j] = IMI[j, k]

        # Kmeans 聚类
        IMI[np.where(IMI < 0)] = 0
        tmp_IMI = IMI.reshape((-1, 1))
        tmp_IMI = tmp_IMI[np.where(tmp_IMI > 0)].reshape((-1, 1))  # 在这里切的时候只考虑大于0的值（跟tends的java版本一致）
        # 只考虑正数的情况和一刀切，考虑0值的情况在beta=100(120),150的时候有所差别，其余无明显差别

        estimator = KMeans(n_clusters=2)
        estimator.fit(tmp_IMI)
        label_pred = estimator.labels_
        temp_0 = tmp_IMI[label_pred == 0]
        temp_1 = tmp_IMI[label_pred == 1]

        tau = min(np.max(temp_1), np.max(temp_0))
        prune_network = np.zeros((nodes_num, nodes_num))
        prune_network[np.where(IMI > tau)] = 1

        return prune_network


    def node_lidu_clicked_event(self):
        # 选择节点粒度
        self.lidu_type = "node"
        self.radioButton_multi_aspect.setEnabled(True)
        if self.radioButton_one_aspect.isChecked():
            # 取消不可选中
            self.radioButton_incomplete_data.setEnabled(True)
            self.radioButton_noise_data.setEnabled(True)

    def group_lidu_clicked_event(self):
        # 选择团体粒度
        self.lidu_type = "group"
        # 设置为不可选中
        self.radioButton_multi_aspect.setDisabled(True)
        self.radioButton_incomplete_data.setDisabled(True)
        self.radioButton_noise_data.setDisabled(True)

    def one_aspect_clicked_event(self):
        # 选择单模态
        self.aspect_type = "one"
        if self.radioButton_node_lidu.isChecked():
            self.radioButton_incomplete_data.setEnabled(True)
            self.radioButton_noise_data.setEnabled(True)

    def multi_aspect_clicked_event(self):
        # 选择多模态
        self.aspect_type = "multi"
        # 设置为不可选中
        self.radioButton_incomplete_data.setDisabled(True)
        self.radioButton_noise_data.setDisabled(True)

    def complete_data_clicked_event(self):
        # 选择完整数据
        self.data_type = "complete"

    def noise_data_clicked_event(self):
        # 选择噪声数据
        self.data_type = "noise"

    def incomplete_data_clicked_event(self):
        # 选择不完整数据
        self.data_type = "incomplete"

    def get_file_path(self):
        # 获取文件路径
        file_path, _ = QFileDialog.getOpenFileName(None, "请选择文件", "", "All Files (*)")
        self.lineEdit_file_address.setText(file_path)
        self.file_path = file_path



class Result_Dialog(QDialog):
    # 展示推断结果的对话框
    def __init__(self,result,mode):
        super().__init__()
        self.result = result
        self.result_str = ""
        self.mode = mode
        self.init_Ui(self.result)


    def init_Ui(self,result):
        # 设置dialog窗口标题
        self.setWindowTitle("传播网络重构结果")
        # 设置界面尺寸大小
        self.resize(500, 450)
        self.textBrowser_result = QtWidgets.QTextBrowser(self)
        self.textBrowser_result.setGeometry(QtCore.QRect(10, 10, 481, 361))
        self.textBrowser_result.setObjectName("textBrowser_result")

        self.pushButton_exportResult = QtWidgets.QPushButton(self)
        self.pushButton_exportResult.setGeometry(QtCore.QRect(70, 390, 122, 32))
        self.pushButton_exportResult.setObjectName("pushButton_exportResult")
        self.pushButton_exportResult.setText("导出重构结果")

        self.pushButton_close = QtWidgets.QPushButton(self)
        self.pushButton_close.setGeometry(QtCore.QRect(300, 390, 122, 32))
        self.pushButton_close.setObjectName("pushButton_close")
        self.pushButton_close.setText("关闭")


        self.display_result()
        self.pushButton_exportResult.clicked.connect(self.exportResult_clicked_event)
        self.pushButton_close.clicked.connect(self.close_clicked_event)


    def exportResult_clicked_event(self):
        file_save_path = os.getcwd()
        current_datetime = datetime.datetime.now()
        file_name = current_datetime.strftime("%Y-%m-%d %H_%M_%S")
        file_save_path = file_save_path + "/result_" + file_name + ".txt"
        result_file = open(file_save_path,"w")
        result_file.write(self.result_str)
        result_file.close()

        self.textBrowser_result.append("重构结果已导出到:\n"+". /result_" + file_name + ". txt")
        self.textBrowser_result.moveCursor(self.textBrowser_result.textCursor().End)


    def close_clicked_event(self):
        self.close()

    def display_result(self):
        if self.mode == 0:
            # result是一个numpy矩阵
            node_number = self.result.shape[0]
            self.result_str = "(父节点ID,  子节点ID)\n"
            for i in range(node_number):
                for j in range(node_number):
                    if self.result[i][j] == 1:
                        self.result_str = self.result_str + str(i) + ",  " + str(j) + "\n"
        elif self.mode == 3:
            self.result_str = "(节点群体编号：节点ID，节点ID，...。)\n1：2，6，7，8，10，16，18，19，20，21，22，25，28，29，31，37，47，58，61，66，67，73，77，78，79，80，81，82，85，96。\n\n"\
            + "2：12，13，14，23，34，56，60，87，88，90，91，97。\n\n"\
            +"3：1，5，11，15，17，24，26，27，30，32，33，36，38，39，42，43，46，49，50，54，55，59，62，69，74，75，76，83，84，86，92，94，95。\n\n"\
            +"4：0，3，4，9，35，40，41，44，45，48，51，52，53，57，63，64，65，68，70，71，72，89，93，98，99。\n\n"


        self.textBrowser_result.setText(self.result_str)







# if __name__ == '__main__':
#     # 创建QApplication类的实例
#     app = QApplication(sys.argv)
#     # 创建一个主窗口
#     mainWindow = QMainWindow()
#     # 创建Ui_MainWindow的实例
#     ui = Ui_MainWindow()
#     # 调用setupUi在指定窗口(主窗口)中添加控件
#     ui.setupUi(mainWindow)
#     # 显示窗口
#     mainWindow.show()
#     # 进入程序的主循环，并通过exit函数确保主循环安全结束
#     sys.exit(app.exec_())